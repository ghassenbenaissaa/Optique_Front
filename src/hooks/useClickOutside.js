import { useEffect, useRef, useCallback } from 'react';

/**
 * Hook pour dÃ©tecter les clics en dehors d'un Ã©lÃ©ment
 * @param {Function} handler - Fonction Ã  exÃ©cuter lors du clic en dehors
 * @returns {Object} - Ref Ã  attacher Ã  l'Ã©lÃ©ment
 */
export const useClickOutside = (handler) => {
  const ref = useRef();

  // ðŸ”¹ MÃ©moriser le handler pour Ã©viter les re-renders
  const memoizedHandler = useCallback(handler, [handler]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (ref.current && !ref.current.contains(event.target)) {
        memoizedHandler();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [memoizedHandler]);

  return ref;
};
